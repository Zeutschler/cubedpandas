{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CubedPandas","text":""},{"location":"#multi-dimensional-data-analysis-for-pandas-dataframes","title":"Multi-dimensional data analysis for Pandas dataframes.","text":"<p>!!! Note:      CubedPandas is at an early stage of its development, and current features might be subject to change.      Your Feedback,      Ideas and     Issues are very welcome!</p> <p>CubedPandas provides an easy, intuitive, fast and fun approach to perform multi-dimensional  numerical data analysis &amp; processing on Pandas dataframes. CubedPandas wraps almost any dataframe into a multi-dimensional cube, which can be aggregated, sliced, diced, filtered,  updated and much more. </p> <p>CubedPandas is inspired by OLAP cubes (online analytical processing), which are typically used for reporting, business intelligence, data warehousing and financial analysis purposes.  Just give it a try, check out the sample code below or file 01_basic_usage.py. </p> <p>CubedPandas is licensed under the BSD 3-Clause License and is available on  GitHub and PyPi.</p> <p>If you have fallen in love with CubedPandas or find it otherwise valuable, please consider to become  CubedPandas sponsor on GitHub Sponsors to support the further  development of CubedPandas.</p>"},{"location":"#installation","title":"Installation","text":"<p>After installing CubedPandas...</p> <pre><code>pip install cubedpandas\n</code></pre> <p>...you are ready to go. \"Cubing\" a Pandas DataFrame is as simple as this: <code>cdf = cubed(df)</code>. Please refer the CubedPandas Documentation for all features details and more examples.</p>"},{"location":"#sample-usage","title":"Sample Usage","text":"<pre><code># 01_basic_usage.py:\nimport pandas as pd\nfrom cubedpandas import cubed\n\ndf = pd.DataFrame({\"product\":  [\"Apple\",  \"Pear\",   \"Banana\", \"Apple\",  \"Pear\",   \"Banana\"],\n                   \"channel\":  [\"Online\", \"Online\", \"Online\", \"Retail\", \"Retail\", \"Retail\"],\n                   \"customer\": [\"Peter\",  \"Peter\",  \"Paul\",   \"Paul\",   \"Mary\",   \"Mary\"  ],\n                   \"revenue\":  [100,      150,      300,      200,      250,      350     ],\n                   \"cost\":     [50,        90,      150,      100,      150,      175     ]})\n\ncube = cubed(df)  # That's it! You now have multi-dimensional access to your dataframe. Let's see...\n\n# CubedPandas automatically infers the schema from the dataframe. Numeric columns are considered as\n# measures, all other columns are considered as dimensions. But you can also provide your own schema.\n\n# 1. Getting Data\n# CubedPandas is perfect for 'cell-based' data analysis. You can access individual cells of the cube\n# by slicing the cube by the dimension members and the measure you want to access. The syntax is as follows:\n\n# A full qualified address, including all dimensions and members, is the most explicit way to access a cell:\nprint(cube[\"product:Apple\", \"channel:Online\", \"customer:Peter\", \"revenue\"])\n\n# Another way to access the same cell is to use a dictionary-like syntax, very powerful &amp; fast!\nprint(cube[{\"channel\":\"Online\", \"product\":\"Apple\", \"customer\":(\"Peter\", \"Paul\")}, \"revenue\"])\n\n# If there are no ambiguities across your entire cube (better be sure), you can also use this short form:\nprint(cube[\"Online\", \"Apple\", \"Peter\", \"revenue\"])\n\n# And if your member names are also compliant with Python variable naming, you can even use this form:\nprint(cube.Online.Apple.Peter.revenue)\n\n# 2. Aggregations\n# Cells provide aggregations over all records in the dataframe that match the given dimensions and members.\n# The default and implicit aggregation function is 'sum', but you can also use 'min', 'max', 'avg', 'count', etc.\n# Cells behave like floats, so you can use them in arithmetic operations.\n\nprint(cube[\"Online\"])               # 550 = 100 + 150 + 300\nprint(cube[\"product:Banana\"])       # 650 = 300 + 350\nprint(cube[\"Apple\", \"Online\"])      # 100 = 100 -&gt; implicit sum\nprint(cube[\"Apple\", \"Online\"].sum)  # 100 = 100 -&gt; explicit sum\nprint(cube[\"Apple\", \"cost\"].avg)    # 750 = (50 + 100) / 2\nprint(cube[\"*\"])                    # 1350 -&gt; '*' is a wildcard for all members\nprint(cube[\"*\"].count)              # 6 -&gt; number of affected records\nprint(cube[\"customer:P*\"])          # 750 = 100 + 150 + 300 + 200  -&gt; wildcard search is also supported\nprint(cube.Peter + cube.Mary)       # 850 = (100 + 150) + (250 + 350)\n\n# Cells can also be reused and chained to access sub-cells.\n# This is especially useful and fast for more complex data structures and repeated access to the cell or sub-cells.\n# As CubedPandas does some (optional) internal caching, this can speed up your processing time by factors.\nonline = cube[\"Online\"]\nprint(online[\"Apple\"])              # 100, the value for \"Apple\" in \"Online\" channel\nprint(online.Peter)                 # 250 = 100 + 150, the values for \"peter\" in \"Online\" channel\nprint(online.Peter.cost)            # 140 = 50 + 90, the values for \"peter\" in \"Online\" channel\n\n# 3. Data Manipulation\n# And as you expected, you can also update, delete or insert values in the underlying dataframe if you want to.\ncube[\"Apple\", \"Online\"] *= 1.5         # increase all revenue value of \"Apple\" in \"Online\" channel by 50%\ndel cube[\"Pear\"]                       # delete all data where \"product\" is \"Pear\"\ncube[\"product:Orange\", \"Online\"] = 50  # NOT WORKING YET - add a new record for \"Orange\" in \"Online\" channel\n\nprint(df)  # let's check, if the dataframe has been updated as expected\n\n# ...that's it! Thanks for trying CubedPandas. Your feedback and ideas are highly appreciated. \n</code></pre>"},{"location":"#c-your-feedback-is-very-welcome","title":"C. Your feedback is very welcome!","text":"<p>CubedPandas is still in an early stages of development. Please help improve CubedPandas and  use the CubedPandas GitHub Issues  to report bugs and request new features. For general questions, discussions and feedback, please use the CubedPandas GitHub Discussions.</p>"},{"location":"404/","title":"404","text":""},{"location":"404/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"advanced-usage/","title":"Advanced Usage","text":""},{"location":"advanced-usage/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"basic-usage/","title":"Basic Usage","text":""},{"location":"basic-usage/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"best-practises/","title":"Best Practises","text":""},{"location":"best-practises/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"blog001_why_cpd/","title":"Why CubedPandas?","text":""},{"location":"blog001_why_cpd/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"class-cell/","title":"Generator class","text":"<p>               Bases: <code>SupportsFloat</code></p> <p>A cell represents a multi-dimensional data cell or range from within a cube. Cell objects can be used to navigate through and interact with the data space of a cube and the underlying dataframe. Cells behave like float values and can be directly used in mathematical calculations that read from or write to a cube.</p> <p>Sample usage:</p> <p>.. code:: python     import cubedpandas as cpd</p> <pre><code>df = get_your_dataframe()\ncube = cpd.Cube(df)\n\n# get a value from the cube and add 19% VAT\nnet_value = cube.cell(\"2024\", \"Aug\", \"Germany\", \"NetSales\")\ngross_sales_usa = net_value * 1.19\n\n# create new data or overwrite data for 2025 by copying all 2024 prices and adding 5% inflation\ncube.cell(\"2025\", \"Price\") = cube.cell(\"2024\", \"Price\") * 1.05\n</code></pre>"},{"location":"class-cell/#cubedpandas.cell.Cell.address","title":"<code>address</code>  <code>property</code>","text":"<p>Returns the address of the cell.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.an","title":"<code>an</code>  <code>property</code>","text":"<p>Returns the number of numeric values for a given address. 'an' stands for 'a number'</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.avg","title":"<code>avg</code>  <code>property</code>","text":"<p>Returns the average of the values for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.count","title":"<code>count</code>  <code>property</code>","text":"<p>Returns the number of the records matching a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.cube","title":"<code>cube</code>  <code>property</code>","text":"<p>Returns the cube the cell belongs to.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.max","title":"<code>max</code>  <code>property</code>","text":"<p>Returns the maximum value for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.measure","title":"<code>measure</code>  <code>property</code>","text":"<p>Returns the measure of the cell.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.median","title":"<code>median</code>  <code>property</code>","text":"<p>Returns the median of the values for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.min","title":"<code>min</code>  <code>property</code>","text":"<p>Returns the minimum value for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.nan","title":"<code>nan</code>  <code>property</code>","text":"<p>Returns the number of non-numeric values for a given address. 'nan' stands for 'not a number'</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.numeric_value","title":"<code>numeric_value: float</code>  <code>property</code>","text":"<p>Returns the numeric value of the current cell from the underlying cube.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.nzero","title":"<code>nzero</code>  <code>property</code>","text":"<p>Returns the number of non-zero values for a given address. 'an' stands for 'a number'</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.pof","title":"<code>pof</code>  <code>property</code>","text":"<p>Returns the percentage of the sum of values for a given address related to all values in the data frame.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.std","title":"<code>std</code>  <code>property</code>","text":"<p>Returns the standard deviation of the values for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.sum","title":"<code>sum</code>  <code>property</code>","text":"<p>Returns the sum of the values for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.value","title":"<code>value</code>  <code>property</code> <code>writable</code>","text":"<p>Returns the sum value of the current cell from the underlying cube.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.var","title":"<code>var</code>  <code>property</code>","text":"<p>Returns the variance of the values for a given address.</p>"},{"location":"class-cell/#cubedpandas.cell.Cell.zero","title":"<code>zero</code>  <code>property</code>","text":"<p>Returns the number of zero values for a given address. 'nan' stands for 'not a number'</p>"},{"location":"class-cube/","title":"Generator class","text":"<p>Wrapper for Pandas dataframes to provide multi-dimensional access to mainly numerical values from the underlying dataframe. The multi-dimensional cube schema, containing the dimensions and measures of a cube, can be either inferred automatically from the underlying dataframe (default) or defined explicitly.</p> <p>In addition, easy to use methods to filter, slice, access and manipulate the underlying dataframe are provided.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.an","title":"<code>an</code>  <code>property</code>","text":"<p>Returns the number of numeric values for a given address. 'an' stands for 'a number'</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.avg","title":"<code>avg</code>  <code>property</code>","text":"<p>Returns the average of the values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.count","title":"<code>count</code>  <code>property</code>","text":"<p>Returns the number of the records matching a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.df","title":"<code>df: pd.DataFrame</code>  <code>property</code>","text":"<p>Returns the underlying Pandas dataframe of the Cube.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.dimensions","title":"<code>dimensions: DimensionCollection</code>  <code>property</code>","text":"<p>Returns the dimensions of the Cube.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.max","title":"<code>max</code>  <code>property</code>","text":"<p>Returns the maximum value for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.median","title":"<code>median</code>  <code>property</code>","text":"<p>Returns the median of the values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.memory_usage","title":"<code>memory_usage: int</code>  <code>property</code>","text":"<p>Returns the memory usage of the Cube object instance in bytes, memory for the underlying dataframe in not included.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.min","title":"<code>min</code>  <code>property</code>","text":"<p>Returns the minimum value for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.nan","title":"<code>nan</code>  <code>property</code>","text":"<p>Returns the number of non-numeric values for a given address. 'nan' stands for 'not a number'</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.nzero","title":"<code>nzero</code>  <code>property</code>","text":"<p>Returns the number of non-zero values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.pof","title":"<code>pof</code>  <code>property</code>","text":"<p>Returns the percentage of the sum of values for a given address related to all values in the data frame.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.schema","title":"<code>schema: Schema</code>  <code>property</code>","text":"<p>Returns the schema of the Cube.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.stddev","title":"<code>stddev</code>  <code>property</code>","text":"<p>Returns the standard deviation of the values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.sum","title":"<code>sum</code>  <code>property</code>","text":"<p>Returns the sum of the values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.var","title":"<code>var</code>  <code>property</code>","text":"<p>Returns the variance of the values for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.zero","title":"<code>zero</code>  <code>property</code>","text":"<p>Returns the number of zeros for a given address.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.__init__","title":"<code>__init__(df, schema=None, infer_schema_if_not_provided=True, caching=CachingStrategy.LAZY, caching_threshold=EAGER_CACHING_THRESHOLD, enable_write_back=False)</code>","text":"<p>Initializes a new Cube wrapping and providing a Pandas dataframe as a multi-dimensional data cube. The schema of the Cube can be either inferred automatically from the dataframe  (default) or defined explicitly.</p> <p>:param df: The Pandas dataframe to wrap into a Cube. :param schema: The schema of the Cube. If not provided, the schema will be inferred from the dataframe if         parameter <code>infer_schema_if_not_provided</code> is set to <code>True</code>. :param infer_schema_if_not_provided:  If True, the schema will be inferred from the dataframe if not provided. :param caching: The caching strategy to be used for the Cube. Default and recommended value for almost all use         cases is <code>CachingStrategy.LAZY</code>, which caches dimension members on first access.         Please refer to the documentation of 'CachingStrategy' for more information. :param caching_threshold: The threshold for EAGER caching. If the number of members in a dimension         is below this threshold, the dimension will be cached eagerly.         Default value is <code>EAGER_CACHING_THRESHOLD</code> := 256 members. :param enable_write_back: If True, the Cube will become write-back enable and changes to the data         will be written to the underlying dataframe.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.cell","title":"<code>cell(address)</code>","text":"<p>Returns a cell of the cube for a given address.</p> <p>A cell represents a multi-dimensional data cell or data area in a cube. Cell objects can be used to navigate through and interact with the data space of a cube and the underlying dataframe. Slices behave like float values and can be directly used in mathematical calculations that read from or write to a cube.</p> <p>Sample usage:</p> <p>. code:: python</p> <pre><code>import cubedpandas as cpd\n\ndf = get_your_dataframe()\ncube = cpd.Cube(df)\n\n# get a value from the cube and add 19% VAT\nnet_value = cube.cell(\"2024\", \"Aug\", \"Germany\", \"NetSales\")\ngross_sales_usa = net_value * 1.19\n\n# create new data or overwrite data for 2025 by copying all 2024 prices and adding 5% inflation\ncube.cell(\"2025\", \"Price\") = cube.cell(\"2024\", \"Price\") * 1.05\n</code></pre>"},{"location":"class-cube/#cubedpandas.cube.Cube.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clears the cache for all dimensions of the Cube.</p>"},{"location":"class-cube/#cubedpandas.cube.Cube.slice","title":"<code>slice(rows=None, columns=None, filters=None)</code>","text":"<p>Returns a slice of the cube. A slice represents a view on a cube, and allows for easy access to the underlying Pandas dataframe. Typically, a slice has rows, columns and filter, just like in an Excel PivotTable. Slices are easy to define and use for convenient data analysis.</p> <p>Sample usage:</p> <p>.. code:: python     pass</p>"},{"location":"class-dimension/","title":"SalesDataModel class","text":"<p>               Bases: <code>Iterable</code>, <code>ABC</code></p> <p>Represents a dimension of a cube, mapped to a column in the underlying Pandas dataframe.</p>"},{"location":"class-dimension/#cubedpandas.dimension.Dimension.__init__","title":"<code>__init__(df, column, caching=CachingStrategy.LAZY)</code>","text":"<p>Initializes a new Dimension from a Pandas dataframe and a column name.</p>"},{"location":"class-dimension/#cubedpandas.dimension.Dimension.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clears the cache of the Dimension.</p>"},{"location":"class-measure/","title":"SalesDataModel class","text":"<p>Represents a measure within a Cube. Each measure is mapped to a column in the underlying Pandas dataframe.</p>"},{"location":"class-pandas-ext/","title":"Extension to Pandas","text":"<p>Initializes a new Cube wrapping and providing a Pandas dataframe as a multi-dimensional data cube. The schema of the Cube can be either inferred automatically from the dataframe  (default) or defined explicitly.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The Pandas dataframe to wrap into a Cube.</p> required <code>schema</code> <code>dict | string</code> <p>The schema of the Cube. If not provided, the schema will be inferred from the dataframe if     parameter <code>infer_schema_if_not_provided</code> is set to <code>True</code>.</p> <code>None</code> <code>infer_schema_if_not_provided</code> <code>bool</code> <p>If True, the schema will be inferred from the dataframe if not provided.</p> <code>True</code> <code>caching</code> <code>CachingStrategy</code> <p>(optional) The caching strategy to be used for the Cube. Default and recommended value for almost all use     cases is <code>CachingStrategy.LAZY</code>, which caches dimension members on first access.     Please refer to the documentation of 'CachingStrategy' for more information.</p> <code>LAZY</code> <code>caching_threshold</code> <code>int</code> <p>(optional) The threshold for EAGER caching. If the number of members in a dimension     is below this threshold, the dimension will be cached eagerly.     Default value is <code>EAGER_CACHING_THRESHOLD</code> := 256 members.</p> <code>EAGER_CACHING_THRESHOLD</code> <code>enable_write_back</code> <code>bool</code> <p>(optional) If True, the Cube will become write-back enable and changes to the data     will be written to the underlying dataframe. Default is False.</p> <code>False</code> <p>lorem ipsum</p> <p>A Pandas extension that provides the 'cubed' accessor to Pandas dataframes.</p>"},{"location":"class-pandas-ext/#cubedpandas.pandas_extension.CubedPandasAccessor.cube","title":"<code>cube</code>  <code>property</code>","text":"<p>Initializes a new Cube wrapping and providing a Pandas dataframe as a multi-dimensional data cube. The schema of the Cube can be either inferred automatically from the dataframe  (default) or defined explicitly.</p> <p>:param df: The Pandas dataframe to wrap into a Cube. :param schema: The schema of the Cube. If not provided, the schema will be inferred from the dataframe if         parameter <code>infer_schema_if_not_provided</code> is set to <code>True</code>. :param infer_schema_if_not_provided:  If True, the schema will be inferred from the dataframe if not provided. :param caching: The caching strategy to be used for the Cube. Default and recommended value for almost all use         cases is <code>CachingStrategy.LAZY</code>, which caches dimension members on first access.         Please refer to the documentation of 'CachingStrategy' for more information. :param caching_threshold: The threshold for EAGER caching. If the number of members in a dimension         is below this threshold, the dimension will be cached eagerly.         Default value is <code>EAGER_CACHING_THRESHOLD</code> := 256 members. :param enable_write_back: If True, the Cube will become write-back enable and changes to the data         will be written to the underlying dataframe.</p>"},{"location":"class-schema/","title":"SalesDataModel class","text":"<p>Defines a multidimensional schema, for cell-based data access to a Pandas dataframe using an Cube.</p> <p>The schema defines the dimensions and measures of the cube and can be either inferred from the underlying Pandas dataframe automatically or defined explicitly. The schema can be validated against the Pandas dataframe to ensure the schema is valid for the table.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.dimensions","title":"<code>dimensions: DimensionCollection</code>  <code>property</code>","text":"<p>Returns the dimensions of the schema.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.measures","title":"<code>measures: MeasureCollection</code>  <code>property</code>","text":"<p>Returns the measures of the schema.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.__init__","title":"<code>__init__(df=None, schema=None, caching=CachingStrategy.LAZY)</code>","text":"<p>Initializes a new schema for a Cube upon a given Pandas dataframe. If the dataframe is not provided, the schema needs to be built manually and can also not be validated against the Pandas dataframe.</p> <p>For building a schema manually, you can either create a new schema from scratch or you can load, extend and modify an existing schema as defined by parameter <code>schema</code>. The parameter <code>schema</code> can either be another Schema object, a Python dictionary containing valid schema information, a json string containing valid schema information or a file name or path to a json file containing valid schema information.</p> <p>:param df: (optional) the Pandas dataframe to build the schema from or for. :param schema: (optional) a schema to initialize the Schema with. The parameter <code>schema</code> can either be         another Schema object, a Python dictionary containing valid schema information, a json string         containing valid schema information or a file name or path to a json file containing valid schema         information. :param caching: The caching strategy to be used for the Cube. Default is <code>CachingStrategy.LAZY</code>. Please refer to         the documentation of 'CachingStrategy' for more information.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.__len__","title":"<code>__len__()</code>","text":"<p>Returns the number of dimensions of the schema.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.from_dict","title":"<code>from_dict(dictionary)</code>  <code>classmethod</code>","text":"<p>Creates a new schema from a dictionary containing schema information for a Cube. Please refer to the documentation for further details on valid schema definitions.</p> <p>:param dictionary: The dictionary containing the schema information. :return: Returns a new schema object. :exception: Raises an exception if the schema information is not valid or incomplete.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.from_json","title":"<code>from_json(json_string)</code>  <code>classmethod</code>","text":"<p>Creates a new schema from a json string containing schema information for a Cube. If the json string is not valid and does refer to a file that contains a valid schema in json format, an exception is raised. Please refer to the documentation for further details on valid schema definitions.</p> <p>:param json_string: The json string containing the schema information. :return: Returns a new schema object. :exception: Raises an exception if the schema information is not valid or incomplete.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.infer_schema","title":"<code>infer_schema(df=None, columns=None, sample_records=False)</code>","text":"<p>Infers a multidimensional schema from the Pandas dataframe of the Schema or another Pandas dataframe by analyzing the columns of the table and their contents.</p> <p>This process can be time-consuming for large tables. For such cases, it is recommended to infer the schema only from a sample of the records by setting parameter 'sample_records' to True. By default, the schema is inferred from and validated against all records.</p> <p>The inference process tries to identify the dimensions and their hierarchies of the cube as well as the measures of the cube. If no schema cannot be inferred, an exception is raised.</p> <p>By default, string, datetime and boolean columns are assumed to be measure columns and numerical columns are assumed to be measures for cube computations. By default, all columns of the Pandas dataframe will be used to infer the schema. However, a subset of columns can be specified to infer the schema from. The subset needs to contain at least two columns, one for a single dimensions and one for a single measures.</p> <p>For more complex tables it is possible or even likely that the resulting schema does not match your expectations or requirements. For such cases, you will need to build your schema manually. Please refer the documentation for further details on how to build a schema manually.</p> <p>:param df: (optional) the Pandas dataframe to infer the schema from. If not provided, the schema     is inferred from the Pandas dataframe the Schema object was initialized with.</p> <p>:param columns: (optional) a list of either column names or ordinal column ids to infer the schema from.</p> <p>:param sample_records: (optional) if True, the schema is inferred from a sample of records only.     Setting 'sample_records' to True can be useful for large tables to speed up the inference process.     By default, the schema is inferred from all records of the table.</p> <p>:return: Returns the inferred schema.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.save_as_json","title":"<code>save_as_json(file_name)</code>","text":"<p>Saves the schema as a json file.</p> <p>:param file_name: The name of the file to save the schema to.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.to_dict","title":"<code>to_dict()</code>","text":"<p>Converts the schema into a dictionary containing schema information for an Cube.</p> <p>:return: Returns a dictionary containing the schema information.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.to_json","title":"<code>to_json()</code>","text":"<p>Converts the schema into a dictionary containing schema information for an Cube.</p> <p>:return: Returns a dictionary containing the schema information.</p>"},{"location":"class-schema/#cubedpandas.schema.Schema.validate","title":"<code>validate(df)</code>","text":"<p>Validates the schema against an existing Pandas dataframe.</p> <p>If returned True, the schema is valid for the given Pandas dataframe and can be used to access its data. Otherwise, the schema is not valid and will or may lead to errors when accessing its data.</p> <p>:param df: The Pandas dataframe to validate the schema against.</p> <p>:return: Returns True if the schema is valid for the given Pandas dataframe, otherwise False.</p>"},{"location":"class-slice/","title":"Generator class","text":"<p>A slice represents a view on a cube, and allows for easy access to the underlying Pandas dataframe. Typically, a slice has rows, columns and filter, just like in an Excel PivotTable. Slices are easy to define and use for convenient data analysis.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"method-cubed/","title":"cdf = cubed(df)","text":"<p>The <code>cubed</code> function is the most convenient way to wrap and convert a Pandas dataframe into a CubedPandas cube. <code>cdf</code> is nice and short for a 'cubed data frame' following the Pandas convention of <code>df</code> for a 'data frame'.</p> <p>If no schema is provided when applying the <code>cubed</code> method, a schema will be automatically inferred from the DataFrame.  By default, all numeric columns will be considered as measures, all other columns as dimensions of the cube.</p> <pre><code>import pandas as pd\nfrom cubedpandas import cubed\n\ndf = pd.DataFrame({\"channel\": [\"Online\", \"Online\", \"Online\", \"Retail\", \"Retail\", \"Retail\"],\n                   \"product\": [\"Apple\",  \"Pear\",   \"Banana\", \"Apple\",  \"Pear\",   \"Banana\"],\n                   \"sales\":   [100,      150,      300,      200,      250,      350     ],})\ncdf = cubed(df)    \nprint(f\"Online apple sales = ${cdf.Apple.Online}\")\n</code></pre> <p>Sometimes, e.g. if you want an <code>integer</code> column to be considered as a dimension, you need to provide a schema. Here's an example of the schema with an explicit schema definition, identical to schema automatically inferred. For more information please refer to the Schema documentation.</p> <pre><code>import pandas as pd\nfrom cubedpandas import cubed\n\ndf = pd.DataFrame({\"channel\": [\"Online\", \"Online\", \"Online\", \"Retail\", \"Retail\", \"Retail\"],\n                   \"product\": [\"Apple\",  \"Pear\",   \"Banana\", \"Apple\",  \"Pear\",   \"Banana\"],\n                   \"sales\":   [100,      150,      300,      200,      250,      350     ],})\nschema = {\"dimensions\": [{\"column\":\"channel\"}, {\"column\": \"product\"}],\n          \"measures\":   [{\"column\":\"sales\"}]}\ncdf = cubed(df, schema=schema)\nprint(f\"Online apple sales = ${cdf.Apple.Online}\")\n</code></pre> <p>The <code>cubed</code> method provides the following parameters: </p> <p>Initializes a new Cube wrapping and providing a Pandas dataframe as a multi-dimensional data cube. The schema of the Cube can be either inferred automatically from the dataframe  (default) or defined explicitly.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The Pandas dataframe to wrap into a Cube.</p> required <code>schema</code> <code>dict | string</code> <p>The schema of the Cube. If not provided, the schema will be inferred from the dataframe if     parameter <code>infer_schema_if_not_provided</code> is set to <code>True</code>.</p> <code>None</code> <code>infer_schema_if_not_provided</code> <code>bool</code> <p>If True, the schema will be inferred from the dataframe if not provided.</p> <code>True</code> <code>caching</code> <code>CachingStrategy</code> <p>(optional) The caching strategy to be used for the Cube. Default and recommended value for almost all use     cases is <code>CachingStrategy.LAZY</code>, which caches dimension members on first access.     Please refer to the documentation of 'CachingStrategy' for more information.</p> <code>LAZY</code> <code>caching_threshold</code> <code>int</code> <p>(optional) The threshold for EAGER caching. If the number of members in a dimension     is below this threshold, the dimension will be cached eagerly.     Default value is <code>EAGER_CACHING_THRESHOLD</code> := 256 members.</p> <code>EAGER_CACHING_THRESHOLD</code> <code>enable_write_back</code> <code>bool</code> <p>(optional) If True, the Cube will become write-back enable and changes to the data     will be written to the underlying dataframe. Default is False.</p> <code>False</code>"},{"location":"readme_mkdocs/","title":"CubedPandas website &amp; documentation how-to guide","text":"<p>by Thomas Zeutschler, June 2024</p>"},{"location":"readme_mkdocs/#introduction","title":"Introduction","text":"<p>The CubedPandas website &amp; documentation is made with MkDocs. MkDocs is a static site generator that creates a website from markdown files and from the actual source code of the project. The CubedPandas website will  be hosted on GitHub pages: https://zeutschler.github.io/cubedpandas/.</p> <p>The documentation is structured as follows:</p> <ul> <li>Homepage - Short Intro to CubedPandas, features, installation, sample code, etc.</li> <li>User documentation - The documentation will be used to explain the usage of the tool to the users.</li> <li>Developer documentation - The documentation will be used to explain the architecture and the design of the tool   to developers.</li> <li>Blog - Posts and news about CubedPandas features, development, best practices, etc.</li> </ul>"},{"location":"readme_mkdocs/#how-to-build-the-documentation","title":"How to build the documentation","text":"<p>The documentation can be built by using the <code>mkdocs</code> command line tool from the root directory of the project: </p> <pre><code>mkdocs build --clean --site-dir 'pages/'\n</code></pre>"},{"location":"readme_mkdocs/#how-to-run-and-view-the-documentation-locally","title":"How to run and view the documentation locally","text":"<p>The documentation can be run and viewed locally by using the <code>mkdocs</code> command line tool from the root  directory of the project <pre><code>mkdocs serve\n</code></pre> This will start a local web server that serves the documentation. Edits to the markdown files will be automatically reloaded in the browser. The documentation is the available at the following URL:</p> <p><pre><code>http://127.0.0.1:8000/data-model-generator/\n</code></pre> To stop the local web server, press <code>CTRL+C</code> in the command line tool. That's all, enjoy!</p> <p>Additional information on how to use MkDocs can be found in the MkDocs documentation and in the following guide RealPython: Build Your Python Project Documentation With MkDocs.</p>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"},{"location":"thomas/","title":"About me","text":""},{"location":"thomas/#sorry-well-add-that-later","title":"Sorry, we'll add that later...","text":"<p>The current focus of development is on the core features of CubedPandas.  Once finished I'll work on this documention...</p> <p>!!! Note:     To stay tuned for updates and new releases of CubePandas,      please add a watch to the CubedPandas GitHub repo.         </p> <p>Thomas</p>"}]}